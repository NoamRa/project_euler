"""
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

import time
start_time = time.time()

def calc_triangle_num(nth_triangle):
	out = 0
	for i in xrange(nth_triangle+1):
		out = out + i
	return out


def get_factors(num):
	factors = set()
	for x in range(1, int(num**0.5) + 1):
		if num % x == 0:
			factors.add(x)
			factors.add(num//x)
	return sorted(factors)
    

def triangle_divisors(stop_at):
	num_of_divisors = 1
	nth_triangle = 0
	while num_of_divisors <= stop_at:
		num = calc_triangle_num(nth_triangle)
		if len(get_factors(num)) >= stop_at:
			return num
		else:
			nth_triangle = nth_triangle + 1

stop_at = 500
print triangle_divisors(stop_at)


print "Time elapsed: %5.3f" % (time.time() - start_time)

"""
answer is 76576500
"""